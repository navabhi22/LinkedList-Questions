206. Reverse Linked List
Easy
16.6K
283
Companies

Given the head of a singly linked list, reverse the list, and return the reversed list.

 

Example 1:

Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

Example 2:

Input: head = [1,2]
Output: [2,1]

Example 3:

Input: head = []
Output: []

 

Constraints:

    The number of nodes in the list is the range [0, 5000].
    -5000 <= Node.val <= 5000

 

Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?
method -1 iterative
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode curr=head;
        ListNode prev=null;
        while(curr!=null){
            ListNode temp=curr.next;
            curr.next=prev;
            prev=curr;
            curr=temp;
        }
        return prev;
    }
}


method-2 recursive;
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode curr=head;
        ListNode prev=null;
        
        return recReverse(head,null);
    }
    public ListNode recReverse(ListNode curr, ListNode prev){
        if(curr==null){
            return prev;
        }
        ListNode temp = curr.next;
        curr.next=prev;
        //prev=curr;
        //curr=temp;
        return recReverse(temp,curr);
    }
}
