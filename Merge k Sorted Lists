/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 
 23. Merge k Sorted Lists
Hard
16.6K
606
Companies

You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

 

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6

Example 2:

Input: lists = []
Output: []

Example 3:

Input: lists = [[]]
Output: []

 

Constraints:

    k == lists.length
    0 <= k <= 104
    0 <= lists[i].length <= 500
    -104 <= lists[i][j] <= 104
    lists[i] is sorted in ascending order.
    The sum of lists[i].length will not exceed 104.


class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        int n = lists.length;
        if(n==0) return null;
        int k=0; 
        ListNode head=lists[0];
        while( k<n-1 && lists[k]==null){
            head=lists[k+1];
            k++;
        }
        ListNode temp=null;
        for(int i=0;i<n;i++){
            ListNode curr=lists[i];
            if(curr==null){
                continue;
            }
            if(temp!=null) temp.next=curr;
            while(curr.next!=null){
                curr=curr.next;
            }
            temp=curr;
        }
        return sortList(head);
    }
    public ListNode sortList(ListNode head) {
        return merge(head,mid(head));
    }
    public ListNode merge(ListNode curr1, ListNode curr2) {
        if(curr1==null && curr2==null) return null;
        if(curr1!=null && curr2==null) return curr1;
        if(curr1==null && curr2!=null) return curr2;
        curr1=merge(curr1,mid(curr1));
        curr2=merge(curr2,mid(curr2));
        ListNode head=curr1;
        if(curr1.val>curr2.val){
            head=curr2;
        }
        ListNode prev=null;
        while(curr1!=null&&curr2!=null){
            if(curr1.val<=curr2.val){
                if(prev==null) prev=curr1;
                else {prev.next=curr1;
                    prev=prev.next;}
                curr1=curr1.next;
            }else{
                if(prev==null) prev=curr2;
                else {prev.next=curr2;
                prev=prev.next;
                }
                curr2=curr2.next;
            }
        }
        while(curr1!=null){
            prev.next=curr1;
            prev=prev.next;
            curr1=curr1.next;
        }
         while(curr2!=null){
            prev.next=curr2;
            prev=prev.next;
            curr2=curr2.next;
        }
        return head;
    }
    public ListNode mid(ListNode head) {
         if(head==null || head.next==null){
            return null;
        }
        ListNode slow=head;
        ListNode fast=head;
        ListNode prev=null;
        while(fast!=null && fast.next!=null){
            prev=slow;
            slow=slow.next;
            fast=fast.next.next;
        }
        ListNode temp=slow;
        prev.next=null;
        return temp;
    }
}
