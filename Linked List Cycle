141. Linked List Cycle
Easy
11.4K
972
Companies

Given head, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

Return true if there is a cycle in the linked list. Otherwise, return false.

 

Example 1:

Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).

Example 2:

Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.

Example 3:

Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.

 

Constraints:

    The number of the nodes in the list is in the range [0, 104].
    -105 <= Node.val <= 105
    pos is -1 or a valid index in the linked-list.

 

Follow up: Can you solve it using O(1) (i.e. constant) memory?

method -1
magic number method add or subtract the number out of range and traverse linked list and check next node data if you found node data out of range then there is loop in linked list else not.
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode curr = head;
        while(curr != null){
            if(curr.val>100000) return true;
            if(curr.val<(-100000)) return true;
            if(curr.val>=0)curr.val=100000+curr.val;
            if(curr.val<0) curr.val=curr.val-100000;
            curr=curr.next;
        }
        return false;
    }
}

method -2
slow and fast pointer, traverse linked by a next and a next.next pointer if slow and fast pointer meets then linkd list consists of cycle.
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode curr1 = head;
        ListNode curr2 = head;

        while(curr2!=null && curr2.next!=null){
            curr1=curr1.next;
            curr2=curr2.next.next;
            if(curr1==curr2){
                return true;
            }
        }
        return false;
    }
}
