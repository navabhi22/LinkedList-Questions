

/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if(head==null)return null;
        Node curr=head;
        while(curr!=null){
            Node node =new Node(curr.val);
            Node temp=curr.next;
            curr.next=node;
            node.next=temp;
            curr=temp; 
        }
        curr=head;
        while(curr!=null){
            Node temp=curr.random;
            if(temp!=null)
            curr.next.random=temp.next;
            else curr.next.random=null;
            curr=curr.next.next;
        }
        Node head2=head.next;
        breakList(head,head2);
        return head2;
    }
    public void breakList(Node head1, Node head2){
        if(head1.next.next==null || head2.next==null){
            head1.next=null;
            return;
        }
        head1.next=head1.next.next;
        head2.next=head2.next.next;
        breakList(head1.next,head2.next);
    }
}
