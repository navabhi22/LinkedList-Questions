/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<Integer> s1=new Stack<Integer>();
        Stack<Integer> s2=new Stack<Integer>();
        ListNode curr1=l1;
        ListNode curr2=l2;
        while(curr1!=null){
            s1.push(curr1.val);
            curr1=curr1.next;
        }
        while(curr2!=null){
            s2.push(curr2.val);
            curr2=curr2.next;
        }
        ListNode ans=new ListNode();
        ListNode curr=ans;
        int carry=0;
        while(!s1.isEmpty() && !s2.isEmpty()){
            int sum=s1.pop()+s2.pop()+carry;
            carry=sum/10;
            sum=sum%10;
            curr.val=sum;
            ListNode temp =new ListNode();
            curr.next=temp;
            curr=temp;
        }
        while(!s1.isEmpty()){
            int sum=s1.pop()+carry;
            carry=sum/10;
            sum=sum%10;
            curr.val=sum;
            ListNode temp =new ListNode();
            curr.next=temp;
            curr=temp;
        }
        while(!s2.isEmpty()){
            int sum=s2.pop()+carry;
            carry=sum/10;
            sum=sum%10;
            curr.val=sum;
            ListNode temp =new ListNode();
            curr.next=temp;
            curr=temp;
        }
        curr.val=carry;
        ans=recReverse(ans,null);
        if(carry==0) return ans.next;
        else return ans;
    }
     public ListNode recReverse(ListNode curr, ListNode prev){
        if(curr==null){
            return prev;
        }
        ListNode temp = curr.next;
        curr.next=prev;
        return recReverse(temp,curr);
    }
}
