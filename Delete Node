

Write a function to delete a node in a singly-linked list. You will not be given access to the head of the list, instead you will be given access to the node to be deleted directly.

It is guaranteed that the node to be deleted is not a tail node in the list.
Input Format

First-line contains two integers n and k (number of nodes and position of the node to be deleted) n integers of linked list
Constraints

The number of the nodes in the given list is in the range [2, 1000].
-1000 <= Node.val <= 1000
The value of each node in the list is unique.
The node to be deleted is in the list and is not a tail node
Output Format

Print the new linked list
Sample Input

4 2
1 2 3 4 

Sample Output

1 3 4

Explanation

Delete 2 and join 1 with 3

import java.util.*;
public class Main {
	static class Node{
		public Node(int data2) {
			this.data=data2;
			this.next=null;
		}
		int data;
		Node next;
	}
    public static void main(String args[]) {
        // Your Code Here
		Scanner scn = new Scanner(System.in);
		
		int n = scn.nextInt();
        int k = scn.nextInt();
		int ele=scn.nextInt();
		Node curr = new Node(ele);
		Node head=curr;
		for(int i=1;i<n;i++){
			ele=scn.nextInt();
			Node temp = new Node(ele);
			curr.next=temp;
			curr=temp;
		}
		Disp(removeKthNode(head,k));

    }
	public static Node removeKthNode(Node head, int k) {
        if(k==1)return head.next;
        Node temp=head;
        Node curr=head;
        for(int i=1;i<k-1;i++){
            curr=curr.next;
        }
       curr.next=curr.next.next;
       return temp;
    }
	public static void Disp(Node head){
		Node curr=head;
		while(curr!=null){
			System.out.print(curr.data+" ");
			curr=curr.next;
		}
	}
}
